// Winkhaus Ventilation Calculator - JavaScript Functionality
let timerInterval = null;
let pozostalyCzas = 0;
let isPaused = false;
let timerStarted = false;

// Security: Input validation function
function validateInput(width, length, height, windowWidth, windowHeight, season) {
    // Check for valid numbers
    const values = [width, length, height, windowWidth, windowHeight];
    for (let value of values) {
        if (isNaN(value) || !isFinite(value) || value <= 0 || value > 1000) {
            return false;
        }
    }
    
    // Check season value
    const validSeasons = ['fall', 'spring'];
    if (!validSeasons.includes(season)) {
        return false;
    }
    
    // Logical validation
    if (windowWidth >= width || windowHeight >= height) {
        return false;
    }
    
    return true;
}

// Security: Sanitize output to prevent XSS
function sanitizeOutput(value) {
    if (typeof value === 'number') {
        if (isFinite(value)) {
            const minutes = Math.floor(value);
            const seconds = Math.round((value - minutes) * 60);
            return `${minutes}:${seconds.toString().padStart(2, '0')}`;
        }
        return '0:00';
    }
    return String(value).replace(/[<>]/g, '');
}

// Zmienne globalne do przechowywania stanu dla aktualizacji t≈Çumacze≈Ñ
let currentDisplayState = 'initial'; // 'initial', 'error', 'results', 'completed'
let currentResults = null;

// Security: Rate limiting
let lastCalculationTime = 0;
const CALCULATION_COOLDOWN = 500; // 500ms between calculations

function obliczCzasWietrzenia() {
    // Rate limiting check
    const now = Date.now();
    if (now - lastCalculationTime < CALCULATION_COOLDOWN) {
        return;
    }
    lastCalculationTime = now;

    try {
        const poraRoku = document.getElementById("season").value;
        const szerokosc = parseFloat(document.getElementById("width").value);
        const dlugosc = parseFloat(document.getElementById("length").value);
        const wysokosc = parseFloat(document.getElementById("height").value);
        const szerokoscOkna = parseFloat(document.getElementById("windowWidth").value);
        const wysokoscOkna = parseFloat(document.getElementById("windowHeight").value);

        const resultsContent = document.getElementById("resultsContent");
        
        // Zatrzymaj poprzedni timer je≈õli istnieje
        if (timerInterval) {
            clearInterval(timerInterval);
            timerInterval = null;
        }

        // Enhanced security validation
        if (!validateInput(szerokosc, dlugosc, wysokosc, szerokoscOkna, wysokoscOkna, poraRoku)) {
            currentDisplayState = 'error';
            currentResults = null;
            resultsContent.innerHTML = `
                <div class="results-title">${t('error')}</div>
                <p>${t('errorMessage')}</p>
            `;
            return;
        }

        // Obliczenia
        const kubatura = szerokosc * dlugosc * wysokosc;
        const obwodOkna = 2 * (szerokoscOkna + wysokoscOkna);
        const przeplywPowietrza = (poraRoku === "fall") ? 16 * obwodOkna : 10.5 * obwodOkna;
        const czasWietrzeniaMinuty = (60 * kubatura) / przeplywPowietrza;
        const czasWietrzeniaCaly = Math.ceil(czasWietrzeniaMinuty);

        // Ustawienie czasu w sekundach
        pozostalyCzas = czasWietrzeniaCaly * 60;
        isPaused = false;
        timerStarted = false;

        // Wy≈õwietlenie wynik√≥w
        aktualizujWyswietlanie(kubatura, obwodOkna, czasWietrzeniaCaly);
        
        // Nie uruchamiamy automatycznie timera - u≈ºytkownik musi kliknƒÖƒá START
        // startTimer(kubatura, obwodOkna, czasWietrzeniaCaly);
        
    } catch (error) {
        document.getElementById("resultsContent").innerHTML = `
            <div class="results-title">${t('error')}</div>
            <p>${t('calculationError')} ${error.message}</p>
        `;
    }
}

function startTimer(kubatura, obwodOkna, czasCalkowity) {
    timerInterval = setInterval(function() {
        if (!isPaused) {
            pozostalyCzas--;
            
            if (pozostalyCzas <= 0) {
                clearInterval(timerInterval);
                timerInterval = null;
                pokazZakonczenie(kubatura, obwodOkna, czasCalkowity);
            } else {
                aktualizujWyswietlanie(kubatura, obwodOkna, czasCalkowity);
            }
        }
    }, 1000);
}

function aktualizujWyswietlanie(kubatura, obwodOkna, czasCalkowity) {
    currentDisplayState = 'results';
    currentResults = { kubatura, obwodOkna, czasCalkowity, pozostalyCzas };
    
    const minuty = Math.floor(pozostalyCzas / 60);
    const sekundy = pozostalyCzas % 60;
    const czasFormatowany = `${minuty}:${sekundy.toString().padStart(2, '0')}`;
    
    const resultsContent = document.getElementById("resultsContent");
    resultsContent.innerHTML = `
        <h2 class="results-title">${t('calculationResults')}</h2>
        <div class="timer-display">${czasFormatowany}</div>
        
        <div class="result-item">
            <div class="result-label">${t('ventilationTime')}</div>
            <div class="result-value">${sanitizeOutput(czasCalkowity)} ${t('minutes')}</div>
        </div>
        
        <div class="result-item">
            <div class="result-label">${t('roomVolume')}</div>
            <div class="result-value">${sanitizeOutput(kubatura)} m¬≥</div>
        </div>
        
        <div class="result-item">
            <div class="result-label">${t('windowPerimeter')}</div>
            <div class="result-value">${sanitizeOutput(obwodOkna)} m</div>
        </div>

        <div class="timer-controls">
            <button class="timer-btn play-pause" onclick="toggleTimer()">
                ${!timerStarted ? '‚ñ∂ ' + t('start') : (isPaused ? '‚ñ∂ ' + t('resume') : '‚è∏ ' + t('pause'))}
            </button>
            <button class="timer-btn reset" onclick="resetTimer()">‚èπ ${t('reset')}</button>
        </div>
    `;
}

function pokazZakonczenie(kubatura, obwodOkna, czasCalkowity) {
    currentDisplayState = 'completed';
    currentResults = { kubatura, obwodOkna, czasCalkowity };
    
    const resultsContent = document.getElementById("resultsContent");
    resultsContent.innerHTML = `
        <div class="completion-message">
            üéâ ${t('ventilationComplete')} üéâ
        </div>
        
        <div class="result-item">
            <div class="result-label">${t('calculatedTime')}</div>
            <div class="result-value">${sanitizeOutput(czasCalkowity)} ${t('minutes')}</div>
        </div>
        
        <div class="result-item">
            <div class="result-label">${t('roomVolume')}</div>
            <div class="result-value">${sanitizeOutput(kubatura)} m¬≥</div>
        </div>
        
        <div class="result-item">
            <div class="result-label">${t('windowPerimeter')}</div>
            <div class="result-value">${sanitizeOutput(obwodOkna)} m</div>
        </div>

        <button class="timer-btn" onclick="obliczCzasWietrzenia()">${t('newCalculation')}</button>
    `;
}

function toggleTimer() {
    if (!timerStarted && currentResults) {
        // Pierwszy start - rozpocznij timer z danymi z currentResults
        timerStarted = true;
        isPaused = false;
        startTimer(currentResults.kubatura, currentResults.obwodOkna, currentResults.czasCalkowity);
    } else {
        // Timer ju≈º by≈Ç uruchomiony - prze≈ÇƒÖcz pauzƒô
        isPaused = !isPaused;
    }
    
    const button = document.querySelector('.timer-btn.play-pause');
    if (button) {
        button.innerHTML = !timerStarted ? '‚ñ∂ ' + t('start') : (isPaused ? '‚ñ∂ ' + t('resume') : '‚è∏ ' + t('pause'));
    }
}

function resetTimer() {
    if (timerInterval) {
        clearInterval(timerInterval);
        timerInterval = null;
    }
    
    timerStarted = false;
    isPaused = false;
    currentDisplayState = 'initial';
    currentResults = null;
    
    const resultsContent = document.getElementById("resultsContent");
    resultsContent.innerHTML = `
        <div class="no-results">
            <h2 class="results-title">${t('calculationResults')}</h2>
            <p>${t('enterDataMessage')}</p>
        </div>
    `;
}

// Obiekt z t≈Çumaczeniami
const translations = {
    pl: {
        title: "Kalkulator czasu&nbsp;wietrzenia",
        subtitle: "<strong>Sprawd≈∫,</strong> jak szybko wywietrzysz pomieszczenie, kt√≥re posiada <br>okno z funkcjƒÖ wietrzenia na <strong>6-tkƒô!</strong>",
        description: "KorzystajƒÖc z kalkulatora, obliczysz czas potrzebny <br>do ca≈Çkowitej wymiany <strong>powietrza w pomieszczeniu.</strong>",
        instructions: "<strong>Podaj wymiary</strong> pomieszczenia oraz wymiary okna z funkcjƒÖ wietrzenia na 6-tkƒô. <br><strong>Wska≈º porƒô roku,</strong> poniewa≈º ma ona wp≈Çyw na czas wietrzenia.",
        calculate: "Oblicz czas wietrzenia",
        roomDimensions: "Wymiary pomieszczenia",
        windowDimensions: "Wymiary okna",
        ventilationTime: "Czas wietrzenia",
        season: "Pora roku",
        autumn: "Jesie≈Ñ/Zima",
        spring: "Wiosna/Lato",
        roomVolume: "Kubatura pomieszczenia",
        windowPerimeter: "Obw√≥d okna",
        calculationResults: "Wyniki oblicze≈Ñ",
        calculatedTime: "Obliczony czas",
        calculationDescription: "KorzystajƒÖc z kalkulatora, obliczysz czas potrzebny do ca≈Çkowitej wymiany powietrza w pomieszczeniu, wyposa≈ºonym w 1 okno z funkcjƒÖ wietrzenia na 6-tkƒô.",
        check: "Sprawd≈∫!",
        language: "Jƒôzyk:",
        enterDataMessage: "Wprowad≈∫ dane i kliknij \"Oblicz\", aby zobaczyƒá wyniki",
        newCalculation: "Nowe obliczenie",
        pause: "Pauza",
        start: "Start",
        resume: "Wzn√≥w",
        error: "B≈ÇƒÖd",
        errorMessage: "Wprowad≈∫ poprawne, dodatnie warto≈õci dla wszystkich p√≥l.",
        calculationError: "WystƒÖpi≈Ç b≈ÇƒÖd podczas oblicze≈Ñ:",
        minutes: "minut",
        ventilationComplete: "WIETRZENIE ZAKO≈ÉCZONE!",
        reset: "Reset",
        widthPlaceholder: "Szeroko≈õƒá [m]",
        lengthPlaceholder: "D≈Çugo≈õƒá [m]",
        heightPlaceholder: "Wysoko≈õƒá [m]",
        windowWidthPlaceholder: "Szeroko≈õƒá [m]",
        windowHeightPlaceholder: "Wysoko≈õƒá [m]"
    },
    cz: {
        title: "Kalkulaƒçka doby&nbsp;vƒõtr√°n√≠",
        subtitle: "<strong>Zkuste,</strong> jak rychle vyvƒõtr√°te m√≠stnost, kter√° m√° <br>okno s funkc√≠ <strong>6mm odvƒõtr√°n√≠!</strong>",
        description: "Pomoc√≠ kalkulaƒçky vypoƒç√≠t√°te ƒças pot≈ôebn√Ω <br>k √∫pln√© v√Ωmƒõnƒõ <strong>vzduchu v m√≠stnosti.</strong>",
        instructions: "<strong>Uveƒète rozmƒõry</strong> m√≠stnosti a rozmƒõry okna s funkc√≠ vƒõtr√°n√≠ 6mm odsazen√≠. <br><strong>Uveƒète roƒçn√≠ obdob√≠,</strong> proto≈æe to ovliv≈àuje dobu vƒõtr√°n√≠.",
        calculate: "Vypoƒç√≠tat",
        roomDimensions: "Rozmƒõry m√≠stnosti",
        windowDimensions: "Rozmƒõry okna", 
        ventilationTime: "Doba vƒõtr√°n√≠",
        season: "Sez√≥na",
        autumn: "Podzim/Zima",
        spring: "Jaro/L√©to",
        roomVolume: "Objem m√≠stnosti",
        windowPerimeter: "Obvod okna",
        calculationResults: "Odpoƒçet ƒçasu vƒõtr√°n√≠",
        calculatedTime: "Vypoƒç√≠tan√Ω ƒças",
        calculationDescription: "Pomoc√≠ kalkulaƒçky si m≈Ø≈æete vypoƒç√≠tat ƒças pot≈ôebn√Ω pro √∫plnou v√Ωmƒõnu vzduchu v m√≠stnosti vybaven√© 1 oknem s funkc√≠ vƒõtr√°n√≠ 6mm odsazen√≠.",
        check: "Zkontroluj!",
        language: "Jazyk:",
        enterDataMessage: "Zadejte √∫daje a kliknƒõte na \"Vypoƒç√≠tat\", abyste vidƒõli v√Ωsledky",
        newCalculation: "Nov√Ω v√Ωpoƒçet",
        pause: "Pauza",
        start: "Start",
        resume: "Pokraƒçovat",
        error: "Chyba",
        errorMessage: "Zadejte spr√°vn√©, kladn√© hodnoty pro v≈°echna pole.",
        calculationError: "Bƒõhem v√Ωpoƒçt≈Ø do≈°lo k chybƒõ:",
        minutes: "minut",
        ventilationComplete: "VƒöTR√ÅN√ç DOKONƒåENO!",
        reset: "Reset",
        widthPlaceholder: "≈†√≠≈ôka [m]",
        lengthPlaceholder: "D√©lka [m]",
        heightPlaceholder: "V√Ω≈°ka [m]",
        windowWidthPlaceholder: "≈†√≠≈ôka [m]",
        windowHeightPlaceholder: "V√Ω≈°ka [m]"
    },
    ru: {
        title: "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–∏&nbsp;–ø—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–Ω–∏—è",
        subtitle: "<strong>–û—Ü–µ–Ω–∏—Ç–µ,</strong> –∫–∞–∫ –±—ã—Å—Ç—Ä–æ –ø—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–µ—Ç—Å—è –ø–æ–º–µ—â–µ–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –µ—Å—Ç—å <br>–æ–∫–Ω–æ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π <strong>–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–Ω–∏—è!</strong>",
        description: "–° –ø–æ–º–æ—â—å—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—Ä–µ–º—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ <br>–¥–ª—è –ø–æ–ª–Ω–æ–π —Ü–∏—Ä–∫—É–ª—è—Ü–∏–∏ <strong>–≤–æ–∑–¥—É—Ö–∞ –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏.</strong>",
        instructions: "<strong>–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã</strong> –ø–æ–º–µ—â–µ–Ω–∏—è –∏ —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–Ω–∏—è. <br><strong>–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≥–æ–¥–∞,</strong> –ø–æ—Å–∫–æ–ª—å–∫—É –æ–Ω–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–Ω–∏—è.",
        calculate: "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å",
        roomDimensions: "–†–∞–∑–º–µ—Ä—ã –ø–æ–º–µ—â–µ–Ω–∏—è",
        windowDimensions: "–†–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞",
        ventilationTime: "–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–Ω–∏—è",
        season: "–í—Ä–µ–º—è –≥–æ–¥–∞",
        autumn: "–û—Å–µ–Ω—å/–∑–∏–º–∞",
        spring: "–í–µ—Å–Ω–∞/–ª–µ—Ç–æ",
        roomVolume: "–ö—É–±–∞—Ç—É—Ä–∞ –ø–æ–º–µ—â–µ–Ω–∏—è",
        windowPerimeter: "–ü–µ—Ä–∏–º–µ—Ç—Ä –æ–∫–Ω–∞",
        calculationResults: "–í—ã—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–Ω–∏—è",
        calculatedTime: "–†–∞—Å—á–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è",
        calculationDescription: "–° –ø–æ–º–æ—â—å—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—Ä–µ–º—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –ø–æ–ª–Ω–æ–π —Ü–∏—Ä–∫—É–ª—è—Ü–∏–∏ –≤–æ–∑–¥—É—Ö–∞ –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏, –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–Ω–æ–º 1 –æ–∫–Ω–æ–º —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–Ω–∏—è.",
        check: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ!",
        language: "–Ø–∑—ã–∫:",
        enterDataMessage: "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞–∂–º–∏—Ç–µ \"–†–∞—Å—Å—á–∏—Ç–∞—Ç—å\", —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
        newCalculation: "–ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç",
        pause: "–ü–∞—É–∑–∞",
        start: "–°—Ç–∞—Ä—Ç",
        resume: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
        error: "–û—à–∏–±–∫–∞",
        errorMessage: "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ, –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–π.",
        calculationError: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–∞—Ö:",
        minutes: "–º–∏–Ω—É—Ç",
        ventilationComplete: "–ü–†–û–í–ï–¢–†–ò–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!",
        reset: "–°–±—Ä–æ—Å",
        widthPlaceholder: "–®–∏—Ä–∏–Ω–∞ [–º]",
        lengthPlaceholder: "–î–ª–∏–Ω–∞ [–º]",
        heightPlaceholder: "–í—ã—Å–æ—Ç–∞ [–º]",
        windowWidthPlaceholder: "–®–∏—Ä–∏–Ω–∞ [–º]",
        windowHeightPlaceholder: "–í—ã—Å–æ—Ç–∞ [–º]"
    },
    ua: {
        title: "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —á–∞—Å—É&nbsp;–ø—Ä–æ–≤—ñ—Ç—Ä—é–≤–∞–Ω–Ω—è",
        subtitle: "<strong>–î—ñ–∑–Ω–∞–π—Å—è,</strong> –∑–∞ —Å–∫—ñ–ª—å–∫–∏ —á–∞—Å—É –º–æ–∂–Ω–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –ø—Ä–æ–≤—ñ—Ç—Ä–∏—Ç–∏ –ø—Ä–∏–º—ñ—â–µ–Ω–Ω—è –∑ <br>–≤—ñ–∫–Ω–æ–º, —â–æ –º–∞—î —Ñ—É–Ω–∫—Ü—ñ—é –ø—Ä–æ–≤—ñ—Ç—Ä—é–≤–∞–Ω–Ω—è!",
        description: "–°–∫–æ—Ä–∏—Å—Ç–∞–≤—à–∏—Å—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º, –≤–∏ –∑–º–æ–∂–µ—Ç–µ —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ —á–∞—Å, –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π <br>–¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –æ–±–º—ñ–Ω—É <strong>–ø–æ–≤—ñ—Ç—Ä—è –≤ –ø—Ä–∏–º—ñ—â–µ–Ω–Ω—ñ.</strong>",
        instructions: "<strong>–í–∫–∞–∂—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä–∏</strong> –ø—Ä–∏–º—ñ—â–µ–Ω–Ω—è —Ç–∞ —Ä–æ–∑–º—ñ—Ä–∏ –≤—ñ–∫–Ω–∞, —â–æ –º–∞—î —Ñ—É–Ω–∫—Ü—ñ—é –ø—Ä–æ–≤—ñ—Ç—Ä—é–≤–∞–Ω–Ω—è. <br><strong>–û–±–µ—Ä—ñ—Ç—å —Ç–∞–∫–æ–∂ –ø–æ—Ä—É —Ä–æ–∫—É ‚Äî –∞–¥–∂–µ –≤–æ–Ω–∞ –≤–ø–ª–∏–≤–∞—î –Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –ø—Ä–æ–≤—ñ—Ç—Ä—é–≤–∞–Ω–Ω—è.</strong>",
        calculate: "–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏",
        roomDimensions: "–†–æ–∑–º—ñ—Ä–∏ –ø—Ä–∏–º—ñ—â–µ–Ω–Ω—è",
        windowDimensions: "–†–æ–∑–º—ñ—Ä–∏ –≤—ñ–∫–Ω–∞",
        ventilationTime: "–ß–∞—Å –ø—Ä–æ–≤—ñ—Ç—Ä—é–≤–∞–Ω–Ω—è",
        season: "–ü–æ—Ä–∞ —Ä–æ–∫—É",
        autumn: "–û—Å—ñ–Ω—å/–∑–∏–º–∞",
        spring: "–í–µ—Å–Ω–∞/–ª—ñ—Ç–æ",
        roomVolume: "–û–±'—î–º –ø—Ä–∏–º—ñ—â–µ–Ω–Ω—è (–º3)",
        windowPerimeter: "–ü–µ—Ä–∏–º–µ—Ç—Ä –≤—ñ–∫–Ω–∞",
        calculationResults: "–ó–≤–æ—Ä–æ—Ç–Ω–∏–π –≤—ñ–¥–ª—ñ–∫ —á–∞—Å—É –ø—Ä–æ–≤—ñ—Ç—Ä—é–≤–∞–Ω–Ω—è",
        calculatedTime: "–†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∏–π —á–∞—Å",
        calculationDescription: "–ó–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Ä–æ–∑—Ä–∞—Ö—É–π—Ç–µ —á–∞—Å, –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –æ–±–º—ñ–Ω—É –ø–æ–≤—ñ—Ç—Ä—è –≤ –∫—ñ–º–Ω–∞—Ç—ñ, –æ–±–ª–∞–¥–Ω–∞–Ω—ñ–π 1 –≤—ñ–∫–Ω–æ–º –∑ —Ñ—É–Ω–∫—Ü—ñ—î—é –ø—Ä–æ–≤—ñ—Ç—Ä—é–≤–∞–Ω–Ω—è.",
        check: "–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏",
        language: "–ú–æ–≤–∞:",
        enterDataMessage: "–í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å \"–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏\", —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏",
        newCalculation: "–ù–æ–≤–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫",
        pause: "–ü–∞—É–∑–∞",
        start: "–°—Ç–∞—Ä—Ç",
        resume: "–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏",
        error: "–ü–æ–º–∏–ª–∫–∞",
        errorMessage: "–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ñ, –¥–æ–¥–∞—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö –ø–æ–ª—ñ–≤.",
        calculationError: "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—á–∏—Å–ª–µ–Ω—å:",
        minutes: "—Ö–≤–∏–ª–∏–Ω",
        ventilationComplete: "–ü–†–û–í–Ü–¢–†–Æ–í–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û!",
        reset: "–°–∫–∏–Ω—É—Ç–∏",
        widthPlaceholder: "–®–∏—Ä–∏–Ω–∞ [–º]",
        lengthPlaceholder: "–î–æ–≤–∂–∏–Ω–∞ [–º]",
        heightPlaceholder: "–í–∏—Å–æ—Ç–∞ [–º]",
        windowWidthPlaceholder: "–®–∏—Ä–∏–Ω–∞ [–º]",
        windowHeightPlaceholder: "–í–∏—Å–æ—Ç–∞ [–º]"
    }
};

// Funkcja zmiany jƒôzyka
function changeLanguage(lang) {
    currentLanguage = lang;
    
    // Obs≈Çuga zwyk≈Çych element√≥w z data-i18n
    const elements = document.querySelectorAll('[data-i18n]');
    elements.forEach(element => {
        const key = element.getAttribute('data-i18n');
        if (translations[lang] && translations[lang][key]) {
            if (element.tagName === 'BUTTON') {
                element.textContent = translations[lang][key];
            } else if (element.tagName === 'OPTION') {
                element.textContent = translations[lang][key];
            } else {
                // U≈ºywamy innerHTML dla tag√≥w HTML (np. <strong>)
                element.innerHTML = translations[lang][key];
            }
        }
    });
    
    // Obs≈Çuga placeholder√≥w z data-i18n-placeholder
    const placeholderElements = document.querySelectorAll('[data-i18n-placeholder]');
    placeholderElements.forEach(element => {
        const key = element.getAttribute('data-i18n-placeholder');
        if (translations[lang] && translations[lang][key]) {
            element.placeholder = translations[lang][key];
        }
    });
    
    // Aktualizacja dynamicznie generowanej zawarto≈õci
    updateDynamicContent();
}

// Funkcja pomocnicza do pobierania t≈Çumacze≈Ñ
let currentLanguage = 'pl';
function t(key) {
    return translations[currentLanguage] && translations[currentLanguage][key] ? translations[currentLanguage][key] : key;
}

// Funkcja do aktualizacji dynamicznie generowanej zawarto≈õci
function updateDynamicContent() {
    if (!currentResults && currentDisplayState === 'initial') {
        // Stan poczƒÖtkowy
        const resultsContent = document.getElementById("resultsContent");
        resultsContent.innerHTML = `
            <div class="no-results">
                <h2 class="results-title">${t('calculationResults')}</h2>
                <p>${t('enterDataMessage')}</p>
            </div>
        `;
    } else if (currentDisplayState === 'error') {
        // Komunikat b≈Çƒôdu
        const resultsContent = document.getElementById("resultsContent");
        resultsContent.innerHTML = `
            <div class="results-title">${t('error')}</div>
            <p>${t('errorMessage')}</p>
        `;
    } else if (currentDisplayState === 'results' && currentResults) {
        // Wyniki z timerem - wywo≈Çaj funkcjƒô aktualizacji
        aktualizujWyswietlanie(currentResults.kubatura, currentResults.obwodOkna, currentResults.czasCalkowity);
    } else if (currentDisplayState === 'completed' && currentResults) {
        // Komunikat zako≈Ñczenia
        pokazZakonczenie(currentResults.kubatura, currentResults.obwodOkna, currentResults.czasCalkowity);
    }
}

// Event Listeners
document.addEventListener('DOMContentLoaded', function() {
    currentLanguage = 'pl';
    currentDisplayState = 'initial';
    currentResults = null;
    changeLanguage('pl');

    // Dodanie obs≈Çugi Enter w formularzu
    const calculatorForm = document.getElementById('calculatorForm');
    if (calculatorForm) {
        calculatorForm.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                obliczCzasWietrzenia();
            }
        });
    }

    // Obs≈Çuga zmiany jƒôzyka
    const languageSelect = document.getElementById('languageSelect');
    if (languageSelect) {
        languageSelect.addEventListener('change', function(e) {
            changeLanguage(e.target.value);
        });
    }
});